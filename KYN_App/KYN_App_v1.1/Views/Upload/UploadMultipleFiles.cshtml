@model KYN_App_v1._1.Models.UploadMultipleViewModel

@{
    Layout = null;
}

<!DOCTYPE html>
<!--
/*
 * jQuery File Upload Plugin Basic Plus Demo
 * https://github.com/blueimp/jQuery-File-Upload
 *
 * Copyright 2013, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 */
-->
<html lang="en">
<head>
    <!-- Force latest IE rendering engine or ChromeFrame if installed -->
    <!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><![endif]-->
    <meta charset="utf-8">
    <title>CrossFriend::Initiative to spread Happiness...</title>
    <meta name="description" content="File Upload widget with multiple file selection, drag&amp;drop support, progress bar, validation and preview images, audio and video for jQuery. Supports cross-domain, chunked and resumable file uploads. Works with any server-side platform (Google App Engine, PHP, Python, Ruby on Rails, Java, etc.) that supports standard HTML form file uploads.">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Bootstrap styles -->
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <!-- Generic page styles -->
    <link rel="stylesheet" href="~/Content/MultipleFileCss/style.css">
    <!-- CSS to style the file input field as button and adjust the Bootstrap progress bars -->
    <link rel="stylesheet" href="~/Content/MultipleFileCss/jquery.fileupload.css">
</head>

<body>
    <div class="w3layouts-breadcrumbs text-center">
        <div class="container">
            <a href="/Ghaziabad/Crossings" class="btn btn-success">Done... Go Back to main page...</a>
        </div>
    </div>
    <br />
    <div class="clearfix"></div>
    <div class="container">
        <div class="well">
            <span>
                Existing Images...
            </span>
        </div>
        <div class="row">
            <div class="col-sm-12" id="slider-thumbs">
                <!-- Bottom switcher of slider -->
                <ul class="hide-bullets">
                    <li class="col-sm-12">
                        <a class="thumbnail" href="~/Images/Business_Images/@Model.BusinessID/Main.jpg" target="_blank">
                            <img src="~/Images/Business_Images/@Model.BusinessID/Main.jpg">
                        </a>
                    </li>
                    @{
                        int count = 0;
                        foreach (var image in Model.ImageSliders)
                        {
                            count += 1;
                            <li class="col-lg-2 col-md-2 col-sm-3 col-xs-6">
                                <a class="thumbnail" href="@image" target="_blank"><img src="@image" class="focus-image img-responsive" style="min-height:75px"></a>
                                @Html.ActionLink("Delete", "DeleteFile", "Upload", new { ID = @Model.BusinessID, imageID = @image }, null)
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>

        <br>
        <br>
        <!-- The fileinput-button span is used to style the file input field as button -->
        <span class="btn btn-success fileinput-button">
            <i class="glyphicon glyphicon-plus"></i>
            <span>Add files...</span>
            <!-- The file input field used as target for the file upload widget -->
            <input id="fileupload" type="file" name="files[]" multiple>
        </span>
        <br>
        <br>
        <!-- The global progress bar -->
        <div id="progress" class="progress">
            <div class="progress-bar progress-bar-success"></div>
        </div>
        <div class="well">
            <span>
                Click on the Add Files button to select Images, once on the page Click on the save button on each Image to load... Once uploaded, Upload button will disappear.
            </span>
        </div>
        <!-- The container for the uploaded files -->
        <div id="files" class="files"></div>
        <br>
    </div>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <!-- The jQuery UI widget factory, can be omitted if jQuery UI is already included -->
    <script src="~/Scripts/MultipleFile/vendor/jquery.ui.widget.js"></script>
    <!-- The Load Image plugin is included for the preview images and image resizing functionality -->
    <script src="//blueimp.github.io/JavaScript-Load-Image/js/load-image.all.min.js"></script>
    <!-- The Canvas to Blob plugin is included for image resizing functionality -->
    <script src="//blueimp.github.io/JavaScript-Canvas-to-Blob/js/canvas-to-blob.min.js"></script>
    <!-- Bootstrap JS is not required, but included for the responsive demo navigation -->
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
    <!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
    @*<script src="js/jquery.iframe-transport.js"></script>*@
    <script src="~/Scripts/MultipleFile/jquery.iframe-transport.js"></script>
    <!-- The basic File Upload plugin -->
    <script src="~/Scripts/MultipleFile/jquery.fileupload.js"></script>
    <!-- The File Upload processing plugin -->
    <script src="~/Scripts/MultipleFile/jquery.fileupload-process.js"></script>
    <!-- The File Upload image preview & resize plugin -->
    <script src="~/Scripts/MultipleFile/jquery.fileupload-image.js"></script>
    <!-- The File Upload audio preview plugin -->
    <script src="~/Scripts/MultipleFile/jquery.fileupload-audio.js"></script>
    <!-- The File Upload video preview plugin -->
    <script src="~/Scripts/MultipleFile/jquery.fileupload-video.js"></script>
    <!-- The File Upload validation plugin -->
    <script src="~/Scripts/MultipleFile/jquery.fileupload-validate.js"></script>
    <script>
        /*jslint unparam: true, regexp: true */
        /*global window, $ */
        $(function () {
            'use strict';
            // Change this to the location of your server-side upload handler:
            var url = '/Upload/UploadSecondaryImages/',
                uploadButton = $('<button/>')
                    .addClass('btn btn-primary')
                    .prop('disabled', true)
                    .text('Processing...')
                    .on('click', function () {
                        var $this = $(this),
                            data = $this.data();
                        $this
                            .off('click')
                            .text('Abort')
                            .on('click', function () {
                                $this.remove();
                                data.abort();
                            });
                        data.submit().always(function () {
                            $this.remove();
                        });
                    });
            $('#fileupload').fileupload({
                url: url,
                dataType: 'json',
                autoUpload: false,
                acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
                maxFileSize: 999000,
                // Enable image resizing, except for Android and Opera,
                // which actually support image resizing, but fail to
                // send Blob objects via XHR requests:
                disableImageResize: /Android(?!.*Chrome)|Opera/
                    .test(window.navigator.userAgent),
                previewMaxWidth: 100,
                previewMaxHeight: 100,
                previewCrop: true
            }).on('fileuploadadd', function (e, data) {
                data.context = $('<div class="col-md-2 col-sm-3 col-xs-4"/>').appendTo('#files');
                $.each(data.files, function (index, file) {
                    var node = $('<p/>')
                            .append($('<span/>').text(file.name));
                    if (!index) {
                        node
                            .append('<br>')
                            .append(uploadButton.clone(true).data(data));
                    }
                    node.appendTo(data.context);
                });
            }).on('fileuploadprocessalways', function (e, data) {
                var index = data.index,
                    file = data.files[index],
                    node = $(data.context.children()[index]);
                if (file.preview) {
                    node
                        .prepend('<br>')
                        .prepend(file.preview);
                }
                if (file.error) {
                    node
                        .append('<br>')
                        .append($('<span class="text-danger"/>').text(file.error));
                }
                if (index + 1 === data.files.length) {
                    data.context.find('button')
                        .text('Save')
                        .prop('disabled', !!data.files.error);
                }
            }).on('fileuploadprogressall', function (e, data) {
                var progress = parseInt(data.loaded / data.total * 100, 10);
                $('#progress .progress-bar').css(
                    'width',
                    progress + '%'
                );
            }).on('fileuploaddone', function (e, data) {
                if (data.result === false) { alert("There are some errors while uploading image"); }
                else {

                }
            }).on('fileuploadfail', function (e, data) {
                $.each(data.files, function (index) {
                    var error = $('<span class="text-danger"/>').text('File upload failed.');
                    $(data.context.children()[index])
                        .append('<br>')
                        .append(error);
                });
            }).prop('disabled', !$.support.fileInput)
                .parent().addClass($.support.fileInput ? undefined : 'disabled');
        });
    </script>
</body>
</html>
